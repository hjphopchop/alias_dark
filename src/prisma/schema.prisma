generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["referentialActions", "nApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  settings Settings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  id             String  @id @default(cuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id])
  roundTime      Int     @default(60)
  pointToWin     Int     @default(25)
  takeAwayPoints Boolean @default(false)
}

model Category {
  id          String     @id @default(cuid())
  title       String     @unique
  description String?
  oficial     Boolean    @default(false)
  imageId      String
  questions   Question[]
}

model Question {
  id         String   @id @default(cuid())
  title      String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Image {
  id         String   @id @default(uuid())
  url       String
  type      ImageType @default(CATEGORY_COVER)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum ImageType {
  CATEGORY_COVER
  USER_AVATAR
}
